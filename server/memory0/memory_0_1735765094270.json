{"content":{"messages":[{"role":"user","content":"Для доступа к деталям долговременной памяти вызывает API локального компонента. Предоставь реализацию api. Локальный сервер на nodejs"},{"role":"assistant","content":"Вот пример реализации локального API сервера на Node.js для работы с иерархической памятью:\n\n```javascript\nconst fs = require('fs');\nconst path = require('path');\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\n// Директория для хранения файлов долговременной памяти\nconst memoryDir = 'memory_files';\n\n// Получить список файлов памяти\napp.get('/api/memory/list', (req, res) => {\n  fs.readdir(memoryDir, (err, files) => {\n    if (err) {\n      console.error('Error listing files:', err);\n      res.status(500).send('Error listing files');\n    } else {\n      res.json(files);\n    }\n  });\n});\n\n// Прочитать содержимое файла памяти\napp.get('/api/memory/read/:filename', (req, res) => {\n  const filename = req.params.filename;\n  const filePath = path.join(memoryDir, filename);\n\n  fs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) {\n      console.error(`Error reading file ${filename}:`, err);\n      res.status(500).send(`Error reading file ${filename}`);\n    } else {\n      res.json({ content: data });\n    }\n  });\n});\n\n// Записать в файл памяти\napp.post('/api/memory/write', (req, res) => {\n  const { filename, content } = req.body;\n  const filePath = path.join(memoryDir, filename);\n\n  fs.writeFile(filePath, content, (err) => {\n    if (err) {\n      console.error(`Error writing file ${filename}:`, err);\n      res.status(500).send(`Error writing file ${filename}`);\n    } else {\n      res.json({ message: `File ${filename} written successfully` });\n    }\n  });\n});\n\napp.listen(port, () => {\n  console.log(`Memory API server listening at http://localhost:${port}`);\n});\n```\n\nВ этом примере:\n\n1. Импортируются необходимые модули: `fs` для работы с файловой системой, `path` для работы с путями и `express` для создания API сервера.\n\n2. Определяется директория `memoryDir` для хранения файлов долговременной памяти.\n\n3. Создаются 3 маршрута API:\n   - `GET /api/memory/list` - возвращает список файлов в директории `memoryDir`\n   - `GET /api/memory/read/:filename` - возвращает содержимое файла `filename` из директории `memoryDir`\n   - `POST /api/memory/write` - записывает переданное `content` в файл `filename` в директории `memoryDir`\n\n4. Сервер запускается и прослушивает порт 3000.\n\nДля использования:\n1. Установите зависимости: `npm install express`\n2. Запустите сервер: `node server.js`\n3. Сервер будет доступен по адресу `http://localhost:3000`\n4. Языковая модель ИИ может взаимодействовать с API, отправляя HTTP-запросы на этот адрес.\n\nОбратите внимание, что в этом примере не реализована проверка прав доступа и безопасность. В реальном приложении необходимо добавить соответствующую логику. Этот пример демонстрирует лишь базовую идею локального API для работы с иерархической памятью."}],"response":"Вот пример реализации локального API сервера на Node.js для работы с иерархической памятью:\n\n```javascript\nconst fs = require('fs');\nconst path = require('path');\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\n// Директория для хранения файлов долговременной памяти\nconst memoryDir = 'memory_files';\n\n// Получить список файлов памяти\napp.get('/api/memory/list', (req, res) => {\n  fs.readdir(memoryDir, (err, files) => {\n    if (err) {\n      console.error('Error listing files:', err);\n      res.status(500).send('Error listing files');\n    } else {\n      res.json(files);\n    }\n  });\n});\n\n// Прочитать содержимое файла памяти\napp.get('/api/memory/read/:filename', (req, res) => {\n  const filename = req.params.filename;\n  const filePath = path.join(memoryDir, filename);\n\n  fs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) {\n      console.error(`Error reading file ${filename}:`, err);\n      res.status(500).send(`Error reading file ${filename}`);\n    } else {\n      res.json({ content: data });\n    }\n  });\n});\n\n// Записать в файл памяти\napp.post('/api/memory/write', (req, res) => {\n  const { filename, content } = req.body;\n  const filePath = path.join(memoryDir, filename);\n\n  fs.writeFile(filePath, content, (err) => {\n    if (err) {\n      console.error(`Error writing file ${filename}:`, err);\n      res.status(500).send(`Error writing file ${filename}`);\n    } else {\n      res.json({ message: `File ${filename} written successfully` });\n    }\n  });\n});\n\napp.listen(port, () => {\n  console.log(`Memory API server listening at http://localhost:${port}`);\n});\n```\n\nВ этом примере:\n\n1. Импортируются необходимые модули: `fs` для работы с файловой системой, `path` для работы с путями и `express` для создания API сервера.\n\n2. Определяется директория `memoryDir` для хранения файлов долговременной памяти.\n\n3. Создаются 3 маршрута API:\n   - `GET /api/memory/list` - возвращает список файлов в директории `memoryDir`\n   - `GET /api/memory/read/:filename` - возвращает содержимое файла `filename` из директории `memoryDir`\n   - `POST /api/memory/write` - записывает переданное `content` в файл `filename` в директории `memoryDir`\n\n4. Сервер запускается и прослушивает порт 3000.\n\nДля использования:\n1. Установите зависимости: `npm install express`\n2. Запустите сервер: `node server.js`\n3. Сервер будет доступен по адресу `http://localhost:3000`\n4. Языковая модель ИИ может взаимодействовать с API, отправляя HTTP-запросы на этот адрес.\n\nОбратите внимание, что в этом примере не реализована проверка прав доступа и безопасность. В реальном приложении необходимо добавить соответствующую логику. Этот пример демонстрирует лишь базовую идею локального API для работы с иерархической памятью."},"timestamp":"2025-01-01T20:58:14.270Z","level":0}